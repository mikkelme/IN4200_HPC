


/*
a)
load 2 cache lines:
  one cache lines get 4 * 8 bytes (double precision)
  latency = 100 clock cycles
  time to load = (4*8)*3.2e-9 = 10
  total for one cache lines = 100 ns + 10 ns = 110 ns
  total for both cache lines = 220 ns

compute and store:
  time = 1ns

With 2 loaded cache lines it can perform 8 flops with one clock cycle pr. 4 flops

thus we get 8 flops / (222 ns) ≈ 4.5 MFlops/sec


b)

from a) we know that it takes 10 ns to laod one cache. The latency is 100 ns and thus we need
to sustain 100/10 + 1 = 11 outstanding prefetches for the code to be bandwidth-limited.



c)
If the cache line was twice as long could hold data for 2 cycles.
The time to load a cache line would then be 2*4*8*3.2e-9 = 20 ns
Thus we would not to only sustain 100/20 + 1 = 6 prefetches for it to memory dependent.
for four times the cache length we get 100/40 + 1 = 3.5 ≈ 4 (no half prefetches).


d)
If prefetching hides all the latency we get the efficiency
= 8 flops / 22 ns ≈ 363 MFlops / sec
*/
