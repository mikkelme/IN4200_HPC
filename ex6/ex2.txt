There are in total 20 independent tasks.
These tasks however require different time usages.
More specifically, task No. 1 requires one hourâ€™s of a worker,
task No. 2 requires two hours, task No. 3 requires three hours,
and so on. (We assume that it is not possible to let two or
more workers collaborate on one task for a faster execution.)
If there are two equal workers, how many hours at least do
they need to finish all the 20 tasks?
What if there are three equal workers?


Lets begin by assuming n independent tasks. For two workers we see that
we can distribute the work equally over blocks of four tasks:
n-3, n-2, n-1, n
such that each worker get
p_1: n-3, n
p_2: n-2, n-1
where the total work time for both worker is 2n-3.
In the case with n = 20 where 20%4 = 0 we can distribute the work equally as follows:
p_1: 1 4 5 8 9  12 13 16 17 20, sum = 105
p_2: 2 3 6 7 10 11 14 15 18 19, sum = 105

For three workers we follow a similar strategy but we need blocks of 6 to distribute the
work equally:
p_1: n-5, n
p_2: n-4, n-1
p_3: n-3, n-2

If the number of task is not divisble by 6 there might will be a waste of workers.
For 20 task we get

p_1: 1 6 7 12 13 18 19   = 76
p_2: 2 5 8 11 14 17 20   = 77
p_3: 3 4 9 10 15 16      = 57

Here worker p_3 will remain passive for the last 20 hours while worker p_1 will
also remain passive for the last hours of the work that p_2 does. Hence we waste
21 computations hours. Can this be fixed? We can shuffle around

p_1: 1 6 7 11 12 15 18  = 70
p_2: 3 5 8 10 13 14 17  = 70
p_3: 2 4 9 16 19 20     = 70

solution suggestion:

p_1: 18 17  12 11  6 5 1 = 70
p_2: 19 16  13 10  7 3 2 = 70
p_3: 20 15  14  9  8 4   = 70

8 7 6 5 4 3 2 1

8 4
7 3 2
6 5 1   
